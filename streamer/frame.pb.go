// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: frame.proto

package streamer

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StreamFile struct {
	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	Size_    int64  `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	Mode     uint32 `protobuf:"varint,4,opt,name=Mode,proto3" json:"Mode,omitempty"`
	ModTime  string `protobuf:"bytes,5,opt,name=ModTime,proto3" json:"ModTime,omitempty"`
	FullPath string `protobuf:"bytes,6,opt,name=fullPath,proto3" json:"fullPath,omitempty"`
}

func (m *StreamFile) Reset()         { *m = StreamFile{} }
func (m *StreamFile) String() string { return proto.CompactTextString(m) }
func (*StreamFile) ProtoMessage()    {}
func (*StreamFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_5379e2b825e15002, []int{0}
}
func (m *StreamFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamFile.Merge(m, src)
}
func (m *StreamFile) XXX_Size() int {
	return m.Size()
}
func (m *StreamFile) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamFile.DiscardUnknown(m)
}

var xxx_messageInfo_StreamFile proto.InternalMessageInfo

func (m *StreamFile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StreamFile) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *StreamFile) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *StreamFile) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *StreamFile) GetModTime() string {
	if m != nil {
		return m.ModTime
	}
	return ""
}

func (m *StreamFile) GetFullPath() string {
	if m != nil {
		return m.FullPath
	}
	return ""
}

type Frame struct {
	T int32 `protobuf:"varint,1,opt,name=T,proto3" json:"T,omitempty"`
}

func (m *Frame) Reset()         { *m = Frame{} }
func (m *Frame) String() string { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()    {}
func (*Frame) Descriptor() ([]byte, []int) {
	return fileDescriptor_5379e2b825e15002, []int{1}
}
func (m *Frame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Frame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Frame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Frame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Frame.Merge(m, src)
}
func (m *Frame) XXX_Size() int {
	return m.Size()
}
func (m *Frame) XXX_DiscardUnknown() {
	xxx_messageInfo_Frame.DiscardUnknown(m)
}

var xxx_messageInfo_Frame proto.InternalMessageInfo

func (m *Frame) GetT() int32 {
	if m != nil {
		return m.T
	}
	return 0
}

type FrameError struct {
	T   int32  `protobuf:"varint,1,opt,name=T,proto3" json:"T,omitempty"`
	Err string `protobuf:"bytes,2,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (m *FrameError) Reset()         { *m = FrameError{} }
func (m *FrameError) String() string { return proto.CompactTextString(m) }
func (*FrameError) ProtoMessage()    {}
func (*FrameError) Descriptor() ([]byte, []int) {
	return fileDescriptor_5379e2b825e15002, []int{2}
}
func (m *FrameError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameError.Merge(m, src)
}
func (m *FrameError) XXX_Size() int {
	return m.Size()
}
func (m *FrameError) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameError.DiscardUnknown(m)
}

var xxx_messageInfo_FrameError proto.InternalMessageInfo

func (m *FrameError) GetT() int32 {
	if m != nil {
		return m.T
	}
	return 0
}

func (m *FrameError) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type FrameNewStream struct {
	T    int32       `protobuf:"varint,1,opt,name=T,proto3" json:"T,omitempty"`
	Info *StreamFile `protobuf:"bytes,2,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (m *FrameNewStream) Reset()         { *m = FrameNewStream{} }
func (m *FrameNewStream) String() string { return proto.CompactTextString(m) }
func (*FrameNewStream) ProtoMessage()    {}
func (*FrameNewStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_5379e2b825e15002, []int{3}
}
func (m *FrameNewStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameNewStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameNewStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameNewStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameNewStream.Merge(m, src)
}
func (m *FrameNewStream) XXX_Size() int {
	return m.Size()
}
func (m *FrameNewStream) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameNewStream.DiscardUnknown(m)
}

var xxx_messageInfo_FrameNewStream proto.InternalMessageInfo

func (m *FrameNewStream) GetT() int32 {
	if m != nil {
		return m.T
	}
	return 0
}

func (m *FrameNewStream) GetInfo() *StreamFile {
	if m != nil {
		return m.Info
	}
	return nil
}

type FrameData struct {
	T    int32  `protobuf:"varint,1,opt,name=T,proto3" json:"T,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *FrameData) Reset()         { *m = FrameData{} }
func (m *FrameData) String() string { return proto.CompactTextString(m) }
func (*FrameData) ProtoMessage()    {}
func (*FrameData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5379e2b825e15002, []int{4}
}
func (m *FrameData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrameData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrameData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrameData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrameData.Merge(m, src)
}
func (m *FrameData) XXX_Size() int {
	return m.Size()
}
func (m *FrameData) XXX_DiscardUnknown() {
	xxx_messageInfo_FrameData.DiscardUnknown(m)
}

var xxx_messageInfo_FrameData proto.InternalMessageInfo

func (m *FrameData) GetT() int32 {
	if m != nil {
		return m.T
	}
	return 0
}

func (m *FrameData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamFile)(nil), "StreamFile")
	proto.RegisterType((*Frame)(nil), "Frame")
	proto.RegisterType((*FrameError)(nil), "FrameError")
	proto.RegisterType((*FrameNewStream)(nil), "FrameNewStream")
	proto.RegisterType((*FrameData)(nil), "FrameData")
}

func init() { proto.RegisterFile("frame.proto", fileDescriptor_5379e2b825e15002) }

var fileDescriptor_5379e2b825e15002 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbf, 0x4a, 0xc4, 0x40,
	0x10, 0x87, 0x33, 0x26, 0x39, 0xbd, 0xc9, 0x29, 0xb2, 0x20, 0x2c, 0x16, 0x6b, 0x58, 0x2c, 0x52,
	0x68, 0x0a, 0x2d, 0x2d, 0x04, 0xf1, 0x0e, 0x2c, 0xee, 0x90, 0xbd, 0x54, 0x76, 0x2b, 0xb7, 0xc1,
	0x40, 0xe2, 0xca, 0x1a, 0x11, 0x7c, 0x0a, 0xf1, 0xa9, 0x2c, 0xaf, 0xb4, 0x94, 0xe4, 0x45, 0x64,
	0xe7, 0xfc, 0x83, 0xd7, 0x7d, 0xf3, 0xcd, 0xfe, 0x86, 0xd9, 0xc1, 0xa4, 0x74, 0xba, 0x31, 0xf9,
	0x83, 0xb3, 0xad, 0x95, 0x6f, 0x80, 0x38, 0x6f, 0x9d, 0xd1, 0xcd, 0xa4, 0xaa, 0x0d, 0x63, 0x18,
	0xcd, 0x74, 0x63, 0x38, 0xa4, 0x90, 0x0d, 0x15, 0xb1, 0x77, 0xd7, 0xba, 0xbd, 0xe3, 0x1b, 0x2b,
	0xe7, 0xd9, 0xbb, 0x79, 0xf5, 0x62, 0x78, 0x98, 0x42, 0x16, 0x2a, 0x62, 0xef, 0xa6, 0x76, 0x61,
	0x78, 0x94, 0x42, 0xb6, 0xad, 0x88, 0x19, 0xc7, 0xcd, 0xa9, 0x5d, 0x14, 0x55, 0x63, 0x78, 0x4c,
	0xf1, 0x9f, 0x92, 0xed, 0xe3, 0x56, 0xf9, 0x54, 0xd7, 0x34, 0x79, 0x40, 0xad, 0xdf, 0x5a, 0xee,
	0x61, 0x3c, 0xf1, 0x3b, 0xb2, 0x11, 0x42, 0x41, 0xbb, 0xc4, 0x0a, 0x0a, 0x79, 0x84, 0x48, 0x7a,
	0xec, 0x9c, 0x75, 0xff, 0x7b, 0x6c, 0x17, 0xc3, 0xb1, 0x73, 0xdf, 0x3b, 0x7a, 0x94, 0xe7, 0xb8,
	0x43, 0xaf, 0x67, 0xe6, 0x79, 0xf5, 0xc1, 0xb5, 0xc4, 0x01, 0x46, 0x57, 0xf7, 0xa5, 0xa5, 0x48,
	0x72, 0x92, 0xe4, 0x7f, 0x57, 0x50, 0xd4, 0x90, 0xc7, 0x38, 0xa4, 0x01, 0x97, 0xba, 0xd5, 0x6b,
	0x59, 0x86, 0x91, 0xb7, 0x94, 0x1d, 0x29, 0xe2, 0x8b, 0xc3, 0xf7, 0x4e, 0xc0, 0xb2, 0x13, 0xf0,
	0xd9, 0x09, 0x78, 0xed, 0x45, 0xb0, 0xec, 0x45, 0xf0, 0xd1, 0x8b, 0xe0, 0x06, 0xf3, 0xb3, 0x47,
	0x1a, 0x6e, 0xdc, 0xed, 0x80, 0xce, 0x7e, 0xfa, 0x15, 0x00, 0x00, 0xff, 0xff, 0x96, 0xb6, 0x59,
	0x3f, 0x85, 0x01, 0x00, 0x00,
}

func (m *StreamFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FullPath) > 0 {
		i -= len(m.FullPath)
		copy(dAtA[i:], m.FullPath)
		i = encodeVarintFrame(dAtA, i, uint64(len(m.FullPath)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ModTime) > 0 {
		i -= len(m.ModTime)
		copy(dAtA[i:], m.ModTime)
		i = encodeVarintFrame(dAtA, i, uint64(len(m.ModTime)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Mode != 0 {
		i = encodeVarintFrame(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x20
	}
	if m.Size_ != 0 {
		i = encodeVarintFrame(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintFrame(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFrame(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Frame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Frame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Frame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.T != 0 {
		i = encodeVarintFrame(dAtA, i, uint64(m.T))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FrameError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrameError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintFrame(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x12
	}
	if m.T != 0 {
		i = encodeVarintFrame(dAtA, i, uint64(m.T))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FrameNewStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameNewStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrameNewStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFrame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.T != 0 {
		i = encodeVarintFrame(dAtA, i, uint64(m.T))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FrameData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrameData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrameData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintFrame(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.T != 0 {
		i = encodeVarintFrame(dAtA, i, uint64(m.T))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFrame(dAtA []byte, offset int, v uint64) int {
	offset -= sovFrame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFrame(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovFrame(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovFrame(uint64(m.Size_))
	}
	if m.Mode != 0 {
		n += 1 + sovFrame(uint64(m.Mode))
	}
	l = len(m.ModTime)
	if l > 0 {
		n += 1 + l + sovFrame(uint64(l))
	}
	l = len(m.FullPath)
	if l > 0 {
		n += 1 + l + sovFrame(uint64(l))
	}
	return n
}

func (m *Frame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T != 0 {
		n += 1 + sovFrame(uint64(m.T))
	}
	return n
}

func (m *FrameError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T != 0 {
		n += 1 + sovFrame(uint64(m.T))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovFrame(uint64(l))
	}
	return n
}

func (m *FrameNewStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T != 0 {
		n += 1 + sovFrame(uint64(m.T))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovFrame(uint64(l))
	}
	return n
}

func (m *FrameData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T != 0 {
		n += 1 + sovFrame(uint64(m.T))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFrame(uint64(l))
	}
	return n
}

func sovFrame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFrame(x uint64) (n int) {
	return sovFrame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Frame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Frame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Frame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFrame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFrame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFrame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameNewStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameNewStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameNewStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFrame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFrame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &StreamFile{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrameData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrameData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrameData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFrame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFrame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFrame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFrame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFrame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFrame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFrame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFrame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFrame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFrame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFrame = fmt.Errorf("proto: unexpected end of group")
)
